# -*- mode: snippet -*-
# name: constructor
# key: ctor
# --
${1:ClassName}(${2:parameters}) {
    ${0:// body}
}

# -*- mode: snippet -*-
# name: destructor
# key: dtor
# --
~${1:ClassName}() {
    ${0:// body}
}

# -*- mode: snippet -*-
# name: function
# key: func
# --
${1:return_type} ${2:function_name}(${3:args}) {
    ${0:// body}
}

# -*- mode: snippet -*-
# name: if-else
# key: ifelse
# --
if (${1:condition}) {
    ${2:// body}
} else {
    ${3:// body}
}

# -*- mode: snippet -*-
# name: for-loop
# key: for
# --
for (int ${1:i} = ${2:0}; ${1:i} < ${3:10}; ++${1:i}) {
    ${0:// body}
}

# -*- mode: snippet -*-
# name: while-loop
# key: while
# --
while (${1:condition}) {
    ${0:// body}
}

# -*- mode: snippet -*-
# name: include
# key: include
# --
#include <${1:header}.h>

# -*- mode: snippet -*-
# name: namespace
# key: ns
# --
namespace ${1:my_namespace} {
    ${0:// body}
}

# -*- mode: snippet -*-
# name: class
# key: class
# --
class ${1:ClassName} {
public:
    ${2:// constructor, methods, etc.}
private:
    ${3:// private members}
};

# -*- mode: snippet -*-
# name: member-function
# key: memfunc
# --
${1:return_type} ${2:ClassName}::${3:function_name}(${4:args}) {
    ${0:// body}
}
